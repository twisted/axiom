#!/usr/bin/python

# Benchmark of Axiom Item in-memory attribute modification.  Accepts no
# parameters. Reports one statistic, the number of seconds it takes to
# change the value of an in-memory attribute.


import sys, time

from axiom.store import Store
from axiom.attributes import inmemory, text

import benchlib


def benchmark():
    numAttributes = 5
    # Include text attribute because at least one persistent attribute is required.
    SomeItem = benchlib.itemTypeWithSomeAttributes([inmemory] * numAttributes + [text])

    counter = range(10000)
    store = Store()
    items = []
    for i in counter:
        items.append(SomeItem(store=store))

    before = time.time()
    for i in items:
        i.attr_0 = 1
        i.attr_1 = 2
        i.attr_2 = 3
        i.attr_3 = 4
        i.attr_4 = 5
    after = time.time()

    return (after - before) / (len(counter) * numAttributes)


def main(argv):
    if len(argv) != 1:
        raise SystemExit("Usage: %s <number of attributes>")
    print benchmark()


if __name__ == '__main__':
    main(sys.argv)
